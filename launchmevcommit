#!/bin/bash

# Initialize variables
RPC_URL="http://69.67.151.95:8545"
NODE_TYPE=""
ROOT_DIRECTORY="$HOME/.mev-commit"
MEV_COMMIT_VERISON="v0.1.2-rc5"
# Define the base URL for downloading the mev-commit release
BASE_URL="https://github.com/primevprotocol/mev-commit/releases/download/$MEV_COMMIT_VERISON"

# Contract Addresses
BIDDER_REGISTRY_CONTRACT="0x62197Abd7672925c7606Bdf9931e42baCa6619AD"
PROVIDER_REGISTRY_CONTRACT="0xeA73E67c2E34C4E02A2f3c5D416F59B76e7617fC"
PRECONF_CONTRACT="0xBB632720f817792578060F176694D8f7230229d9"

# Function to show usage
usage() {
    echo "Usage: $0 --rpc-url <RPC_URL> --node-type <NODE_TYPE>"
    exit 1
}


# Parse command-line arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --rpc-url) RPC_URL="$2"; shift ;;
        --node-type) NODE_TYPE="$2"; shift ;;
        *) echo "Unknown parameter passed: $1"; usage ;;
    esac
    shift
done

# Check if RPC_URL and NODE_TYPE are provided
if [ -z "$RPC_URL" ] || [ -z "$NODE_TYPE" ]; then
    echo "Error: Missing required arguments."
    usage
fi

# Determine OS and Architecture
OS=$(uname -s)
ARCH=$(uname -m)

# Select the correct file based on OS and Architecture
case $OS in
    "Darwin")
        case $ARCH in
            "arm64") FILE="mev-commit_Darwin_arm64.tar.gz" ;;
            "x86_64") FILE="mev-commit_Darwin_x86_64.tar.gz" ;;
            *) echo "Unsupported architecture"; exit 1 ;;
        esac
        ;;
    "Linux")
        case $ARCH in
            "arm64") FILE="mev-commit_Linux_arm64.tar.gz" ;;
            "x86_64") FILE="mev-commit_Linux_x86_64.tar.gz" ;;
            *) echo "Unsupported architecture"; exit 1 ;;
        esac
        ;;
    "Windows_NT")
        FILE="mev-commit_Windows_x86_64.zip"
        ;;
    *)
        echo "Unsupported operating system"
        exit 1
        ;;
esac


# Download the file using curl
echo -e "\033[31m[\033[34m*\033[31m]\033[33m Downloading mev-commit files...\033[0m"
curl -s -L "${BASE_URL}/${FILE}" -o "${FILE}"

# Check if the download was successful
if [ ! -f "${FILE}" ]; then
    echo "Failed to download the file."
    exit 1
fi

# Check the file type
file "${FILE}"

echo -e "\033[31m[\033[34m*\033[31m]\033[33m Installing foundry...\033[0m"

# Create the foundry directory if it doesn't exist
if [ ! -d ~/.foundry/bin ]; then
    curl -s -L https://foundry.paradigm.xyz | bash
    $HOME/.foundry/bin/foundryup
fi

# check if ROOT_DIRECTORY exists; if it does, ask user if they want to overwrite
# if [ -d "$ROOT_DIRECTORY" ]; then
#     echo -e "\033[31m[\033[34m*\033[31m]\033[33m $ROOT_DIRECTORY already exists. Do you want to overwrite it? [y/n]\033[0m"
#     read -r OVERWRITE
#     if [ "$OVERWRITE" == "y" ]; then
#         rm -rf $ROOT_DIRECTORY
#     else
#         # Start mev-commit with the config file
#         if ! $ROOT_DIRECTORY/mev-commit start --config=$ROOT_DIRECTORY/config.yaml; then
#             echo "Failed to start mev-commit with the specified config."
#             exit 1
#         fi
#     fi
# fi


# Create the target directory if it doesn't exist
mkdir -p $ROOT_DIRECTORY

# Extract the file to the target directory with verbose output
tar -xzf "${FILE}" -C $ROOT_DIRECTORY || { echo "Extraction failed"; exit 1; }

# Check if the extraction was successful
if [ ! -f $ROOT_DIRECTORY/mev-commit ]; then
    echo "Failed to find the mev-commit executable."
    exit 1
fi

# Navigate to the target directory
cd $ROOT_DIRECTORY

echo -e "\033[31m[\033[34m*\033[31m]\033[33m Initializing mev-commit...\033[0m"
./mev-commit --settlement-rpc-endpoint $RPC_URL --peer-type $NODE_TYPE --bidder-registry-contract $BIDDER_REGISTRY_CONTRACT --provider-registry-contract $PROVIDER_REGISTRY_CONTRACT --preconf-contract $PRECONF_CONTRACT --bootnodes /ip4/69.67.151.95/tcp/13522/p2p/16Uiu2HAmLYUvthfDCewNMdfPhrVefBbsfaPL22fWWfC2zuoh5SpV & 
server_pid=$!

sleep 3

KEY=$(cat $ROOT_DIRECTORY/key)
ADDRESS=$(cast wallet address --private-key 0x$(cat $ROOT_DIRECTORY/key))

echo -e "\033[31m[\033[34m*\033[31m]\033[33m Created private key and saved.\033[0m"
echo -e "\033[31m[\033[34m*\033[31m]\033[33m Wallet Address: $ADDRESS \033[0m"

echo -e "\033[31m[\033[34m*\033[31m]\033[33m Funding Wallet Address: $ADDRESS with 100 ether \033[0m"
if ! $HOME/.foundry/bin/cast send --rpc-url "$RPC_URL" --private-key 0x7c9bf0f015874594d321c1c01ada3166c3509bbd91f76f9e4d7380c2df269c55 $ADDRESS --value 100ether > /dev/null 2>&1; then
    echo -e "\033[31m[\033[34m*\033[31m]\033[33m Failed to send transaction with cast. \033[0m"
    exit 1
fi

# Check i Node_Type is provider
if [ "$NODE_TYPE" == "provider" ]; then
    echo -e "\033[31m[\033[34m*\033[31m]\033[33m Registering $ADDRESS as a provider with 50 ether stake \033[0m"

    # Use the RPC URL variable in the cast send command
    if ! $HOME/.foundry/bin/cast send $PROVIDER_REGISTRY_CONTRACT "registerAndStake()" $ADDRESS --rpc-url http://69.67.151.95:8545 --private-key $KEY --value 50ether > /dev/null 2>&1; then
            echo "Failed to send provider registration transaction."
            exit 1
    fi
else
    echo -e "\033[31m[\033[34m*\033[31m]\033[33m Adding a prepay for bidder with $ADDRESS \033[0m"

    # Use the RPC URL variable in the cast send command
    if ! curl -X POST http://localhost:13523/v1/bidder/prepay/1000000000000000000 > /dev/null 2>&1; then
            echo "Failed to send bidder registration transaction."
            exit 1
    fi
fi

# Function to cleanup on exit
cleanup() {
    echo "Killing mev-commit node with PID $server_pid"
    kill $server_pid
}

# Set trap to call cleanup on script exit
trap cleanup EXIT SIGINT


echo -e "\033[31m[\033[34m*\033[31m]\033[33m To kill mev-commit, exit the script. \033[0m" 

wait $server_pid
# ... [rest of your script] ...

