#!/bin/bash

# Initialize variables
RPC_URL=""
NODE_TYPE=""

# Function to show usage
usage() {
    echo "Usage: $0 --rpc-url <RPC_URL> --node-type <NODE_TYPE>"
    exit 1
}


# Parse command-line arguments
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --rpc-url) RPC_URL="$2"; shift ;;
        --node-type) NODE_TYPE="$2"; shift ;;
        *) echo "Unknown parameter passed: $1"; usage ;;
    esac
    shift
done

# Check if RPC_URL and NODE_TYPE are provided
if [ -z "$RPC_URL" ] || [ -z "$NODE_TYPE" ]; then
    echo "Error: Missing required arguments."
    usage
fi

# Determine OS and Architecture
OS=$(uname -s)
ARCH=$(uname -m)

# Define the base URL
BASE_URL="https://github.com/primevprotocol/mev-commit/releases/download/v0.1.0"

# Select the correct file based on OS and Architecture
case $OS in
    "Darwin")
        case $ARCH in
            "arm64") FILE="mev-commit_Darwin_arm64.tar.gz" ;;
            "x86_64") FILE="mev-commit_Darwin_x86_64.tar.gz" ;;
            *) echo "Unsupported architecture"; exit 1 ;;
        esac
        ;;
    "Linux")
        case $ARCH in
            "arm64") FILE="mev-commit_Linux_arm64.tar.gz" ;;
            "x86_64") FILE="mev-commit_Linux_x86_64.tar.gz" ;;
            *) echo "Unsupported architecture"; exit 1 ;;
        esac
        ;;
    "Windows_NT")
        FILE="mev-commit_Windows_x86_64.zip"
        ;;
    *)
        echo "Unsupported operating system"
        exit 1
        ;;
esac

# Download the file using curl
echo -e "\033[31m[\033[34m*\033[31m]\033[33m Downloading mev-commit files...\033[0m"
curl -s -L "${BASE_URL}/${FILE}" -o "${FILE}"

# Check if the download was successful
if [ ! -f "${FILE}" ]; then
    echo "Failed to download the file."
    exit 1
fi

# Check the file type
file "${FILE}"

# Create the foundry directory if it doesn't exist
if [ ! -d ~/.foundry/bin ]; then
    curl -s -L https://foundry.paradigm.xyz | bash
    $HOME/.foundry/bin/foundryup
fi

# Create the target directory if it doesn't exist
mkdir -p ~/.mevcommitup


# Extract the file to the target directory with verbose output
echo -e "\033[31m[\033[34m*\033[31m]\033[33m Extracting files...\033[0m"
tar -xzf "${FILE}" -C ~/.mevcommitup || { echo "Extraction failed"; exit 1; }

# Check if the extraction was successful
if [ ! -f ~/.mevcommitup/mev-commit ]; then
    echo "Failed to find the mev-commit executable."
    exit 1
fi

# Navigate to the target directory
cd ~/.mevcommitup

# Run mev-commit to create key and extract address
echo -e "\033[31m[\033[34m*\033[31m]\033[33m Creating new private key...\033[0m"
ADDRESS=$(./mev-commit create-key key | grep -o '0x[a-zA-Z0-9]\+')
if [ -z "$ADDRESS" ]; then
    echo "Failed to extract the wallet address."
    exit 1
fi

echo -e "\033[31m[\033[34m*\033[31m]\033[33m Created private key and saved.\033[0m"
echo -e "\033[31m[\033[34m*\033[31m]\033[33m Wallet Address: $ADDRESS \033[0m"

KEY=$(cat key)

# Use the RPC URL variable in the cast send command
if ! $HOME/.foundry/bin/cast send --rpc-url "$RPC_URL" --private-key 0x7c9bf0f015874594d321c1c01ada3166c3509bbd91f76f9e4d7380c2df269c55 $ADDRESS --value 100ether; then
    echo "Failed to send transaction with cast."
    exit 1
fi

# Choose or modify config.yaml based on NODE_TYPE
case $NODE_TYPE in
    "bidder")
        # Configure for bidder
        cat > config.yaml <<EOL
priv_key_file: ~/.mevcommitup/key
peer_type: bidder
p2p_port: 13522
http_port: 13523
rpc_port: 13524
secret: hello
log_fmt: json
log_level: debug
bidder_registry_contract: 0x62197Abd7672925c7606Bdf9931e42baCa6619AD
provider_registry_contract: 0xeA73E67c2E34C4E02A2f3c5D416F59B76e7617fC
rpc_endpoint: $RPC_URL
bootnodes:
  - /ip4/69.67.151.95/tcp/13522/p2p/16Uiu2HAmLYUvthfDCewNMdfPhrVefBbsfaPL22fWWfC2zuoh5SpV
EOL
    ;;
    "provider")
    cast send 0xeA73E67c2E34C4E02A2f3c5D416F59B76e7617fC "registerAndStake()" $ADDRESS --rpc-url http://69.67.151.95:8545 --private-key $KEY --value 50ether
        # Configure for provider
        cat > config.yaml <<EOL
        # Configure for provider
        cat > config.yaml <<EOL
priv_key_file: ~/.mevcommitup/key
peer_type: provider
p2p_port: 13522
http_port: 13523
rpc_port: 13524
secret: hello
log_fmt: json
log_level: debug
bidder_registry_contract: 0x62197Abd7672925c7606Bdf9931e42baCa6619AD
provider_registry_contract: 0xeA73E67c2E34C4E02A2f3c5D416F59B76e7617fC
preconf_contract: 0xBB632720f817792578060F176694D8f7230229d9
rpc_endpoint: $RPC_URL
bootnodes:
  - /ip4/69.67.151.95/tcp/13522/p2p/16Uiu2HAmLYUvthfDCewNMdfPhrVefBbsfaPL22fWWfC2zuoh5SpV
EOL
    ;;
    *)
        echo "Invalid node type."
        exit 1
    ;;
esac

# Start mev-commit with the config file
if ! ./mev-commit start --config=config.yaml; then
    echo "Failed to start mev-commit with the specified config."
    exit 1
fi

echo "Script completed successfully."


